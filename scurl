#!/usr/bin/env python2.7
# -*- encoding: utf-8 -*-

import sys
import re
from OpenSSL import SSL
from OpenSSL import crypto
from socket import socket
from optparse import OptionParser
from urlparse import urlparse

# https://curl.haxx.se/docs/manpage.html

# *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .* *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*

# Error code constants found here: http://hugoduncan.org/austenite/src/openssl-sys/lib.rs.html#137-193
CERTIFICATE_EXPIRED = 10

def initOptionParser():
	parser.add_option("--tlsv1.0", action="store_const", const="tlsv1.0", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--tlsv1.1", action="store_const", const="tlsv1.1", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--tlsv1.2", action="store_const", const="tlsv1.2", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--sslv3", "-3", action="store_const", const="sslv3", dest="protocol", default="tlsv1.2", help="todo")

	# --crlfile <file>
	# (HTTPS/FTPS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that
	# are to be considered revoked. If this option is used several times, the last one will be used.
	parser.add_option("--crlfile", action="store", dest="crlfile")

	# --cacert <CA certificate>
	# (SSL) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates.
	# The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this option is
	# typically used to alter that default file.
	parser.add_option("--cacert", action="store", dest="cacert")

	# --allow-state-certs <N>
	# Tells scurl to accept a certificate C as valid if (a) C is an otherwise valid certificate that has expired
	# and (b) C expired within the past N days. The argument N to this option must be a nonnegative integer.
	# If this option is used several times, the last one will be used.
	parser.add_option("--allow-state-certs", action="store", dest="expiration")

	# --ciphers <list of ciphers>
	# (SSL) Specifies which ciphers to use in the connection. The list of ciphers must specify valid ciphers.
	# Read up on SSL cipher list details on this URL: https://www.openssl.org/docs/apps/ciphers.html
	parser.add_option("--ciphers", action="store", dest="ciphers")

	# --pinnedpublickey (PPK) <file> (the path to a public key in PEM format)
	# If specified, scurl will only connect to a server if the servers TLS cert is exactly the one contained in the specified file.
	# Must use the SHA-256 cert fingerprint functionality built into pyOpenSSL to compare the servers cert to the PPK.
	# If the server sends the scurl client a certificate chain, you should only check that the leaf certificate matches
	# the pinned public key certificate - ignore any CA certificates that the server sends.
	# This option overrides the --cacert and --crlfile options. If this option is used several times, the last one will be used.
	parser.add_option("--pinnedpublickey", action="store", dest="ppkfile")
	
	return

def request(host, path):
    # [???] Add a user agent
    # [???] Connection close header (this is good)
    #return '''GET %sHTTP/1.1 \r\nHost: %s\r\nUser-Agent: scurl/cs255\r\nAccept: */*''' % (path, host)
    return '''GET %s HTTP/1.0\r\nHost: %s\r\nUser-Agent: scurl/cs255\r\nConnection: close\r\n\r\n''' % (path, host)


# [???] How do we get the current time, and how do we factor in the N days?
def checkStaleCerts(cert):
 	#if options.cacert is not None:
		#print "checking for stale certificates"
	#date time format
 	return False

def checkAltNames(cert):
 	found = False;
 	for i in range(0, cert.get_extension_count()):
 		extension = cert.get_extension(i)
 		if extension.get_short_name() == "subjectAltName":
 			alt_names = crypto.X509Extension._subjectAltNameString(extension)
 			alt_names_arr = alt_names.replace('DNS:', '').split(', ')
 			if url.netloc in alt_names_arr:
 				found = True
 	return found

def callback(conn, cert, errnum, depth, result):
	certsubject = crypto.X509Name(cert.get_subject())
	commonname = certsubject.commonName
	#print('got certificate: ' + commonname)
			
	if errnum == CERTIFICATE_EXPIRED:
		#check <if expiration is not None:>
		#print cert.get_notAfter()
		return checkStaleCerts(cert)
	elif errnum != 0:
		print('Error number: ' + str(errnum))
		return False
	else:
		return True
	# PREVERIFY OK

def validCertificate(connection):
	# [???] Connection.get_peer_certificate() VS Connection.get_peer_cert_chain()
	cert = connection.get_peer_certificate()
	common_name = cert.get_subject().commonName.decode()

	rxString = r'(?:^|\s)([^.]+\.)?' + common_name.replace('.', '\.')[3:] + '(?:$|\s)'
	regex = re.compile(rxString)
	match = regex.match(url.netloc)

	alt_match = checkAltNames(cert)
	if (match or alt_match):
		return True;
	if not match:
		print "common name doesnt match"
	if not alt_match:
		print "alt name doesnt match"
	else:
		return False;

# *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .* *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*

protocols = {'tlsv1.0': SSL.TLSv1_METHOD, 'tlsv1.1': SSL.TLSv1_1_METHOD, 'tlsv1.2': SSL.TLSv1_2_METHOD, 'sslv3' : SSL.SSLv3_METHOD}

parser = OptionParser()
initOptionParser()
(options, args) = parser.parse_args()

if len(args) < 1:
	sys.exit('Too few arguments!')

url = urlparse(args[0])

if url.scheme != 'https':
	sys.exit('Error!')

# 1. TODO: pinned public key option override, check for none [https://curl.haxx.se/libcurl/c/CURLOPT_PINNEDPUBLICKEY.html]
# Similarly, with PPK it should be fine even if there's some other error with the certificate? (wrong host, subdomain, etc) yes
# 2. TODO: Implement allowing for stale certs
# 3. TODO: check for revoked certs
# 4. non-zero exit code?
# https://piazza.com/class/ij0804zduh61i7?cid=670
# 5. TODO: whats all this then? /scurl https://wrong.hostbadssl.com/

context = SSL.Context(protocols[options.protocol])	# This is overridden by --cacert

if options.crlfile is not None:
	print "loading crl"
	#need to look at signature of CRL file
	#crypto.load_crl(type, buffer) [???]

# ./scurl --cacert ./sanity/data/stanford.pem https://sha256.badssl.com/
if options.cacert is not None:
	context.load_verify_locations(options.cacert)
	
context.set_default_verify_paths()

if options.ciphers is not None:
	# Specifies which ciphers to use in the connection.
	# The list of ciphers must specify valid ciphers. 
	context.set_cipher_list(options.ciphers)

# [???] Disabling Old Versions of SSL/TLS? 
# context.set_options(SSL.OP_NO_SSLv2)

# [???] If no server certificate is sent, because an anonymous cipher is used, SSL_VERIFY_PEER is ignored.
context.set_verify(SSL.VERIFY_PEER, callback)

# [???] Do I need to do <<s.settimeout(5)>>? What about socket arguments, ie <<socket(socket.AF_INET, socket.SOCK_STREAM)>>?
# [???] What about try catch for socket connection (or for handshake), ie <<except SSL.WantReadError>>?

s = socket()
connection = SSL.Connection(context, s)			# [???] For TCP, is socket.SOCK_STREAM necessary?

# TODO: Check if URL contains a specified port, if not, default to 443
# TODO: FIX SOCKET ERRORS!!!!! SEE BELOW
connection.connect((url.netloc,443))

connection.set_connect_state()					
connection.set_tlsext_host_name(url.netloc)		# will this help implement SNI [???]

try:
	connection.do_handshake()
except SSL.Error:
	sys.exit('Error!!!')

if not validCertificate(connection):
	sys.exit('Name issue')

#print request(url.netloc, url.path)

connection.sendall(request(url.netloc, url.path))

# ▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫
# MOST PRESSING ISSUES TO DISCUSS WITH THE TAs DURING OFFICE HOURS
# ▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫

# [?????] Why am I getting this 302 found error (for all of the badSSL sites)
# [?????] I'm getting this error even when I should be getting 404 (./scurl https://sha256.badssl.com/does-not-exist.html)
# [?????] What terminates this loop? (ie how do i print out everything)

# [?????] socket.gaierror: [Errno 8] nodename nor servname provided (./scurl https://test1.tls-o-matic.com/)
# [?????] socket.gaierror: [Errno 8] nodename nor servname provided, or not known (./scurl https://bogus.net.zed/)
# [?????] socket.error: [Errno 61] Connection refused (./scurl https://cpsc.yale.edu/)

# ▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫

# [?????] Figure out what happens when SSL.SysCallError occurs from a recv() call [???]
# [?????] I'm getting this error even when I should be getting 404 (./scurl https://sha256.badssl.com/does-not-exist.html)

header = True;
while 1:
	try:
		block = connection.recv(1024).decode('utf-8')
		if ("\r\n\r\n" in block and header):
			str_arr = block.split("\r\n\r\n", 1)
			block = str_arr[1]
			header = False;
		sys.stdout.write(block)
		sys.stdout.flush()
	except SSL.Error:
		break

connection.shutdown()
connection.close()

#try:
    #recvstr = connection.recv(1024)
#except SSL.WantReadError:
    #sys.exit('Oops')

#print recvstr

#print "success!"

sys.exit(0)

# [???] Closing the connection?

