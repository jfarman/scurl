#!/usr/bin/env python2.7
# -*- encoding: utf-8 -*-
# Author: Jennifer Farman (CS255, Stanford University, Winter 2016)

import re
import sys
import socket
from datetime import datetime, timedelta
from OpenSSL import SSL
from OpenSSL import crypto
from optparse import OptionParser
from urlparse import urlparse

# *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .* *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*

protocols = {'tlsv1.0': SSL.TLSv1_METHOD, 'tlsv1.1': SSL.TLSv1_1_METHOD, 'tlsv1.2': SSL.TLSv1_2_METHOD, 'sslv3' : SSL.SSLv3_METHOD}

errors = {
	'args': "SCURL ERROR: Missing arguments.",
	'netw': "SCURL ERROR: Could not connect to the request URL.",
	'cert': "SCURL ERROR: SSL certificate problem: Invalid certificate chain.",
	'crlf': "SCURL ERROR: SSL certificate problem: unable to get certificate CRL.",
	'ppkf': "SCURL ERROR: Could not load the pinned public key file.",
	'frmt': "SCURL ERROR: Please check the format of the specified arguments."
}

CERTIFICATE_EXPIRED = 10
DEFAULT_PORT = 443
usingPPK = False;
scurl_data = {}

def initOptionParser():
	parser.add_option("--tlsv1.0", action="store_const", const="tlsv1.0", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--tlsv1.1", action="store_const", const="tlsv1.1", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--tlsv1.2", action="store_const", const="tlsv1.2", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--sslv3", "-3", action="store_const", const="sslv3", dest="protocol", default="tlsv1.2", help="todo")

	# --crlfile <file>
	parser.add_option("--crlfile", action="store", dest="crlfile")

	# --cacert <CA certificate>
	parser.add_option("--cacert", action="store", dest="cacert")

	# --allow-state-certs <N>
	parser.add_option("--allow-stale-certs", action="store", dest="expiration")

	# --ciphers <list of ciphers>
	parser.add_option("--ciphers", action="store", dest="ciphers")

	# --pinnedpublickey (PPK) <file>
	parser.add_option("--pinnedpublickey", action="store", dest="ppkfile")
	
	return

def request(host, path):
    return '''GET %s HTTP/1.0\r\nHost: %s\r\nUser-Agent: scurl/cs255\r\nAccept: */*\r\nConnection: close\r\n\r\n''' % (path, host)

def checkStaleCerts(cert):
	window = scurl_data["expired"]
	cert_date = datetime.strptime(cert.get_notAfter(), "%Y%m%d%H%M%SZ")
	curr_date = datetime.now()
	delta = curr_date - cert_date
	return (0 <= int(delta.days) <= int(window))

def checkAltNames(cert):
 	found = False;
 	for i in range(0, cert.get_extension_count()):
 		extension = cert.get_extension(i)
 		if extension.get_short_name() == "subjectAltName":
 			alt_names = crypto.X509Extension._subjectAltNameString(extension)
 			alt_names_arr = alt_names.replace('DNS:', '').split(', ')
 			if url.hostname in alt_names_arr:
 				found = True
 	return found

def notRevoked(cert):
    serial_num = format(cert.get_serial_number(), 'X')
    serial_num_str = str(serial_num)
    for r in scurl_data["revoked"]:
    	if r.get_serial() == serial_num_str:
    		return False
    return True

def isValidPPK(cert):
	crt_digest = cert.digest("sha256")
	ppk_digest = scurl_data["ppkey"].digest("sha256")
	return (crt_digest == ppk_digest)

def callback(conn, cert, errnum, depth, result):
	certsubject = crypto.X509Name(cert.get_subject())
	commonname = certsubject.commonName
	
	# If using a pinned public key, check that the leaf certificate
	# matches the certifcate in the PPK file
	if (depth == 0 and usingPPK):
		return isValidPPK(cert)
	
	# If using a specified CRL file, check to make sure each certificate
	# is not on the CRL (this does not apply when using a PPK)
	if ((options.crlfile is not None) and not usingPPK):
		return notRevoked(cert)
	
	# If the user allows for stale certs, check to make sure each certificate
	# is within the specified window (this does not apply when using a PPK)	
	if errnum == CERTIFICATE_EXPIRED:
		if usingPPK:
			return false
		elif options.expiration is not None:
			return checkStaleCerts(cert)
	# If any error is returned at any stage in the callback, return false
	elif errnum != 0:
		return False
	else:
		return True

def validCertificate(connection):
	cert = connection.get_peer_certificate()
	common_name = cert.get_subject().commonName.decode()

	rxString = r'(?:^|\s)([^.]+\.)?' + common_name.replace('.', '\.')[3:] + '(?:$|\s)'
	regex = re.compile(rxString)
	match = regex.match(url.hostname)

	alt_match = checkAltNames(cert)
	return (match or alt_match)

# *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .* *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*

parser = OptionParser()
initOptionParser()
(options, args) = parser.parse_args()

if len(args) < 1:
	sys.exit(errors['args'])

url = urlparse(args[0])

if url.scheme != 'https':
	sys.exit(errors['frmt'])

context = SSL.Context(protocols[options.protocol])

if options.cacert is not None:
	context.load_verify_locations(options.cacert)
else:	
	context.set_default_verify_paths()

if options.ciphers is not None:
	context.set_cipher_list(options.ciphers)

context.set_verify(SSL.VERIFY_PEER, callback)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection = SSL.Connection(context, s)

# Unless a port is specified in the url, use the default https port (443)
port = url.port if (url.port is not None) else DEFAULT_PORT
try:
	connection.connect((url.hostname,port))
except socket.error:
	sys.exit(errors['netw'])

connection.set_connect_state()					
connection.set_tlsext_host_name(url.hostname)

if options.ppkfile is not None:
    try:
    	ppk_buffer = open(options.ppkfile, 'r').read()
    	options.ppkfile.close()
    except IOError:
    	sys.exit(errors['ppkf'])

    ppk = crypto.load_certificate(crypto.FILETYPE_PEM, ppk_buffer)
    scurl_data["ppkey"] = ppk
    usingPPK = True

if ((options.crlfile is not None) and not usingPPK):
    try:
    	crl_buffer = open(options.crlfile, 'r').read()
    	options.crlfile.close()
    except IOError:
    	sys.exit(errors['crlf'])

    crl_object = crypto.load_crl(crypto.FILETYPE_PEM, crl_buffer)
    revoked_objects = crl_object.get_revoked()
    scurl_data["revoked"] = revoked_objects

if ((options.expiration is not None) and not usingPPK):
	try:
		num = int(options.expiration)
		if num < 0:
			sys.exit(errors['frmt'])
		scurl_data["expired"] = num
	except ValueError:
		sys.exit(errors['frmt'])

try:
	connection.do_handshake()
except SSL.Error:
	sys.exit(errors['cert'])

if not validCertificate(connection):
	sys.exit(errors['cert'])

try:
	connection.sendall(request(url.hostname, url.path))
except SSL.Error:
	sys.exit(errors['netw'])

header = True;
while 1:
	try:
		block = connection.recv(1024).decode('utf-8')
		if ("\r\n\r\n" in block and header):
			str_arr = block.split("\r\n\r\n", 1)
			block = str_arr[1]
			header = False;
		sys.stdout.write(block)
		sys.stdout.flush()
	except SSL.Error:
		break

connection.shutdown()
connection.close()

