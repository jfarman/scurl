#!/usr/bin/env python2.7
# -*- encoding: utf-8 -*-
# Author: Jennifer Farman (CS255, Stanford University, Winter 2016)

import re
import sys
import socket
from datetime import datetime, timedelta
from OpenSSL import SSL
from OpenSSL import crypto
from optparse import OptionParser
from urlparse import urlparse

# *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .* *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*

protocols = {'tlsv1.0': SSL.TLSv1_METHOD, 'tlsv1.1': SSL.TLSv1_1_METHOD, 'tlsv1.2': SSL.TLSv1_2_METHOD, 'sslv3' : SSL.SSLv3_METHOD}

errors = {
	'args': "SCURL ERROR: Missing arguments.",
	'netw': "SCURL ERROR: Could not connect to the request URL.",
	'http': "SCURL ERROR: Please use an https scheme.",
	'cert': "SCURL ERROR: SSL certificate problem: Invalid certificate chain.",
	'crlf': "SCURL ERROR: SSL certificate problem: unable to get certificate CRL.",
	'ppkf': "SCURL ERROR: Could not load the pinned public key file.",
	'frmt': "SCURL ERROR: Please check the format of the specified arguments."
}

CERTIFICATE_EXPIRED = 10
DEFAULT_PORT = 443
usingPPK = False;
scurl_data = {}

def initOptionParser():
	parser.add_option("--tlsv1.0", action="store_const", const="tlsv1.0", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--tlsv1.1", action="store_const", const="tlsv1.1", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--tlsv1.2", action="store_const", const="tlsv1.2", dest="protocol", default="tlsv1.2", help="todo")
	parser.add_option("--sslv3", "-3", action="store_const", const="sslv3", dest="protocol", default="tlsv1.2", help="todo")

	# --crlfile <file>
	parser.add_option("--crlfile", action="store", dest="crlfile")

	# --cacert <CA certificate>
	parser.add_option("--cacert", action="store", dest="cacert")

	# --allow-state-certs <N>
	parser.add_option("--allow-stale-certs", action="store", dest="expiration")

	# --ciphers <list of ciphers>
	parser.add_option("--ciphers", action="store", dest="ciphers")

	# --pinnedpublickey (PPK) <file> (the path to a public key in PEM format)
	# If specified, scurl will only connect to a server if the servers TLS cert is exactly the one contained in the specified file.
	# Must use the SHA-256 cert fingerprint functionality built into pyOpenSSL to compare the servers cert to the PPK.
	# If the server sends the scurl client a certificate chain, you should only check that the leaf certificate matches
	# the pinned public key certificate - ignore any CA certificates that the server sends.
	# This option overrides the --cacert and --crlfile options. If this option is used several times, the last one will be used.
	parser.add_option("--pinnedpublickey", action="store", dest="ppkfile")
	
	return

def request(host, path):
    # [???] Add a user agent
    # [???] Connection close header (this is good)
    #return '''GET %sHTTP/1.1 \r\nHost: %s\r\nUser-Agent: scurl/cs255\r\nAccept: */*''' % (path, host)
    return '''GET %s HTTP/1.0\r\nHost: %s\r\nUser-Agent: scurl/cs255\r\nAccept: */*\r\nConnection: close\r\n\r\n''' % (path, host)

def checkStaleCerts(cert):
	window = scurl_data["expired"]
	cert_date = datetime.strptime(cert.get_notAfter(), "%Y%m%d%H%M%SZ")
	curr_date = datetime.now()
	delta = curr_date - cert_date
	return (0 <= int(delta.days) <= int(window))

def checkAltNames(cert):
 	found = False;
 	for i in range(0, cert.get_extension_count()):
 		extension = cert.get_extension(i)
 		if extension.get_short_name() == "subjectAltName":
 			alt_names = crypto.X509Extension._subjectAltNameString(extension)
 			alt_names_arr = alt_names.replace('DNS:', '').split(', ')
 			if url.hostname in alt_names_arr:
 				found = True
 	return found

def notRevoked(cert):
    serial_num = format(cert.get_serial_number(), 'X')
    serial_num_str = str(serial_num)
    for r in scurl_data["revoked"]:
    	if r.get_serial() == serial_num_str:
    		return False
    return True

def isValidPPK(cert):
	crt_digest = cert.digest("sha256")
	ppk_digest = scurl_data["ppkey"].digest("sha256")
	return (crt_digest == ppk_digest)

def callback(conn, cert, errnum, depth, result):
	certsubject = crypto.X509Name(cert.get_subject())
	commonname = certsubject.commonName
	
	if (depth == 0 and usingPPK):
		return isValidPPK(cert)
	
	if ((options.crlfile is not None) and not usingPPK):
		return notRevoked(cert)
			
	if errnum == CERTIFICATE_EXPIRED:
		if usingPPK:
			return false
		elif options.expiration is not None:
			return checkStaleCerts(cert)
	elif errnum != 0:
		return False
	else:
		return True

def validCertificate(connection):
	cert = connection.get_peer_certificate()
	common_name = cert.get_subject().commonName.decode()

	rxString = r'(?:^|\s)([^.]+\.)?' + common_name.replace('.', '\.')[3:] + '(?:$|\s)'
	regex = re.compile(rxString)
	match = regex.match(url.hostname)

	alt_match = checkAltNames(cert)
	return (match or alt_match)

# *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .* *. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*. · ° ▪ ° · .*

parser = OptionParser()
initOptionParser()
(options, args) = parser.parse_args()

if len(args) < 1:
	sys.exit(errors['args'])

url = urlparse(args[0])

if url.scheme != 'https':
	sys.exit(errors['http'])

context = SSL.Context(protocols[options.protocol])	# This is overridden by --cacert

if options.cacert is not None:
	context.load_verify_locations(options.cacert)
else:	
	context.set_default_verify_paths()

if options.ciphers is not None:
	context.set_cipher_list(options.ciphers)

context.set_verify(SSL.VERIFY_PEER, callback)

# [???] Do I need to do <<s.settimeout(5)>>? 
# [???] What about try catch for socket connection (or for handshake), ie <<except SSL.WantReadError>>?

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)		# [???] double check to make sure this works
connection = SSL.Connection(context, s)						# [???] For TCP, is socket.SOCK_STREAM necessary?

# Unless a port is specified in the url, use the default https port (443)
port = url.port if (url.port is not None) else DEFAULT_PORT
try:
	connection.connect((url.hostname,port))
except socket.error:
	sys.exit(errors['netw'])

connection.set_connect_state()					
connection.set_tlsext_host_name(url.hostname)

# ./scurl --pinnedpublickey ./sanity/data/expired.pem https://expired.badssl.com/
if options.ppkfile is not None:
    try:
    	ppk_buffer = open(options.ppkfile, 'r').read()
    except IOError:
    	sys.exit(errors['ppkf'])

    ppk = crypto.load_certificate(crypto.FILETYPE_PEM, ppk_buffer)
    scurl_data["ppkey"] = ppk
    usingPPK = True

if ((options.crlfile is not None) and not usingPPK):
    try:
    	crl_buffer = open(options.crlfile, 'r').read()
    except IOError:
    	sys.exit(errors['crlf'])

    crl_object = crypto.load_crl(crypto.FILETYPE_PEM, crl_buffer)
    revoked_objects = crl_object.get_revoked()
    scurl_data["revoked"] = revoked_objects

if ((options.expiration is not None) and not usingPPK):
	try:
		num = int(options.expiration)
		if num < 0:
			sys.exit(errors['frmt'])
		scurl_data["expired"] = num
	except ValueError:
		sys.exit(errors['frmt'])

try:
	connection.do_handshake()
except SSL.Error:
	sys.exit(errors['cert'])

if not validCertificate(connection):
	sys.exit(errors['cert'])

try:
	connection.sendall(request(url.hostname, url.path))
except SSL.Error:
	sys.exit(errors['netw'])

# [???] Do I need to do <<s.settimeout(5)>>?
header = True;
while 1:
	try:
		block = connection.recv(1024).decode('utf-8')
		if ("\r\n\r\n" in block and header):
			str_arr = block.split("\r\n\r\n", 1)
			block = str_arr[1]
			header = False;
		sys.stdout.write(block)
		sys.stdout.flush()
	# except SSL.WantReadError
	except SSL.Error:
		break

connection.shutdown()
connection.close()

sys.exit(0)	# [???] Is this neccessary?

# ▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫
# TODO LIST
# ▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫

# 2. Implement pinned public key option override, check for none [https://curl.haxx.se/libcurl/c/CURLOPT_PINNEDPUBLICKEY.html]
#    FYI with PPK it should be fine even if there's some other error with the certificate? (wrong host, subdomain, etc) yes
# 3. # [?????] Check for issue of non-zero exit code (https://piazza.com/class/ij0804zduh61i7?cid=670) 
# 4. Implement allowing for stale certs
# 5. Check for timeouts

# ▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫▫▪▪▫

